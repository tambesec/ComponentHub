openapi: 3.0.3
info:
  title: NetTechPro API - Complete Documentation
  description: |
    ## üåê REST API cho Website B√°n Thi·∫øt B·ªã M·∫°ng NetTechPro
    
    ### üìö API Categories:
    - **Public API** - Cho Client (kh√¥ng c·∫ßn auth)
    - **User API** - Cho kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p
    - **Admin API** - Cho qu·∫£n tr·ªã vi√™n (c·∫ßn admin role)
    
    ### üîê Authentication:
    Bearer token trong header:
    ```
    Authorization: Bearer <your_token>
    ```
    
    ### üìù Response Format:
    ```json
    {
      "success": true,
      "data": {...},
      "message": "Success message"
    }
    ```
  version: 2.0.0
  contact:
    name: NetTechPro API Support
    email: api@nettechpro.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.nettechpro.com
    description: Production server

tags:
  - name: System
    description: H·ªá th·ªëng
  - name: Auth
    description: X√°c th·ª±c & ƒêƒÉng nh·∫≠p
  - name: Public Products
    description: S·∫£n ph·∫©m (Public)
  - name: Admin - Products
    description: Qu·∫£n l√Ω s·∫£n ph·∫©m (Admin)
  - name: Admin - Orders
    description: Qu·∫£n l√Ω ƒë∆°n h√†ng (Admin)
  - name: Admin - Customers
    description: Qu·∫£n l√Ω kh√°ch h√†ng (Admin)
  - name: Admin - Dashboard
    description: Dashboard & Analytics (Admin)

paths:
  # ===== SYSTEM =====
  /api/health:
    get:
      summary: Health check
      description: Ki·ªÉm tra tr·∫°ng th√°i server
      tags: [System]
      responses:
        '200':
          description: Server ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time

  # ===== ADMIN - PRODUCTS =====
  /api/admin/products:
    get:
      summary: Danh s√°ch s·∫£n ph·∫©m (Admin)
      description: L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi ph√¢n trang
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
          description: T√¨m ki·∫øm theo t√™n
        - name: category
          in: query
          schema:
            type: string
          description: L·ªçc theo danh m·ª•c
      responses:
        '200':
          description: Danh s√°ch s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AdminProduct'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: T·∫°o s·∫£n ph·∫©m m·ªõi
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AdminProduct'

  /api/admin/products/{id}:
    get:
      summary: Chi ti·∫øt s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AdminProduct'

    put:
      summary: C·∫≠p nh·∫≠t s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng

    delete:
      summary: X√≥a s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: X√≥a th√†nh c√¥ng

  # ===== ADMIN - ORDERS =====
  /api/admin/orders:
    get:
      summary: Danh s√°ch ƒë∆°n h√†ng (Admin)
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipping, completed, cancelled]
      responses:
        '200':
          description: Danh s√°ch ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/admin/orders/{id}:
    get:
      summary: Chi ti·∫øt ƒë∆°n h√†ng
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderDetail'

  /api/admin/orders/{id}/status:
    put:
      summary: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipping, completed, cancelled]
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng

  # ===== ADMIN - CUSTOMERS =====
  /api/admin/customers:
    get:
      summary: Danh s√°ch kh√°ch h√†ng
      tags: [Admin - Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Danh s√°ch kh√°ch h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'

  /api/admin/customers/{id}:
    get:
      summary: Chi ti·∫øt kh√°ch h√†ng
      tags: [Admin - Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt kh√°ch h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CustomerDetail'

  # ===== ADMIN - DASHBOARD =====
  /api/admin/dashboard/metrics:
    get:
      summary: Dashboard metrics
      description: L·∫•y c√°c metrics t·ªïng quan
      tags: [Admin - Dashboard]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      totalRevenue:
                        type: number
                        example: 125000000
                      totalOrders:
                        type: integer
                        example: 245
                      totalProducts:
                        type: integer
                        example: 156
                      totalCustomers:
                        type: integer
                        example: 892
                      revenueGrowth:
                        type: number
                        example: 12.5
                      ordersGrowth:
                        type: number
                        example: 8.3

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token

  schemas:
    AdminProduct:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "TP-Link Archer C6 - Router WiFi AC1200"
        category:
          type: string
          example: "Router"
        brand:
          type: string
          example: "TP-Link"
        price:
          type: number
          example: 850000
        salePrice:
          type: number
          example: 650000
        stock:
          type: integer
          example: 85
        sold:
          type: integer
          example: 189
        status:
          type: string
          enum: [active, inactive, draft]
        images:
          type: array
          items:
            type: string
        description:
          type: string
        specifications:
          type: object

    ProductInput:
      type: object
      required: [name, category, brand, price, stock]
      properties:
        name:
          type: string
        category:
          type: string
        brand:
          type: string
        price:
          type: number
        salePrice:
          type: number
        stock:
          type: integer
        description:
          type: string
        shortDescription:
          type: string
        specifications:
          type: object
        images:
          type: array
          items:
            type: string

    Order:
      type: object
      properties:
        id:
          type: string
          example: "ORD-20250108-001"
        customerName:
          type: string
        customerEmail:
          type: string
        items:
          type: integer
        total:
          type: number
        status:
          type: string
          enum: [pending, processing, shipping, completed, cancelled]
        paymentMethod:
          type: string
        date:
          type: string
          format: date-time

    OrderDetail:
      type: object
      properties:
        id:
          type: string
        customerInfo:
          type: object
        items:
          type: array
          items:
            type: object
        shippingAddress:
          type: object
        total:
          type: number
        status:
          type: string
        paymentMethod:
          type: string
        timeline:
          type: array
          items:
            type: object

    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        totalOrders:
          type: integer
        totalSpent:
          type: number
        lastOrder:
          type: string
          format: date-time

    CustomerDetail:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            address:
              type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 156
        totalPages:
          type: integer
          example: 16
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
