openapi: 3.0.3
info:
  title: NetTechPro API - Complete Documentation
  description: |
    ## üåê REST API cho Website B√°n Thi·∫øt B·ªã M·∫°ng NetTechPro
    
    ### üìö API Categories:
    - **Public API** - Cho Client (kh√¥ng c·∫ßn auth)
    - **User API** - Cho kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p
    - **Admin API** - Cho qu·∫£n tr·ªã vi√™n (c·∫ßn admin role)
    
    ### üîê Authentication:
    Bearer token trong header:
    ```
    Authorization: Bearer <your_token>
    ```
    
    ### üìù Response Format:
    ```json
    {
      "success": true,
      "data": {...},
      "message": "Success message"
    }
    ```
    
    ### üöÄ Base URL:
    - Development: http://localhost:3000
    - Production: https://api.nettechpro.com
  version: 2.0.0
  contact:
    name: NetTechPro API Support
    email: api@nettechpro.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.nettechpro.com
    description: Production server

tags:
  - name: System
    description: üîß H·ªá th·ªëng
  - name: Auth
    description: üîê X√°c th·ª±c & ƒêƒÉng nh·∫≠p
  - name: Public - Products
    description: üõçÔ∏è S·∫£n ph·∫©m (Public)
  - name: Public - Categories
    description: üìÇ Danh m·ª•c (Public)
  - name: Public - Cart
    description: üõí Gi·ªè h√†ng
  - name: User - Orders
    description: üì¶ ƒê∆°n h√†ng c·ªßa kh√°ch (User)
  - name: Admin - Products
    description: üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m (Admin)
  - name: Admin - Orders
    description: üìã Qu·∫£n l√Ω ƒë∆°n h√†ng (Admin)
  - name: Admin - Customers
    description: üë• Qu·∫£n l√Ω kh√°ch h√†ng (Admin)
  - name: Admin - Categories
    description: üóÇÔ∏è Qu·∫£n l√Ω danh m·ª•c (Admin)
  - name: Admin - Dashboard
    description: üìä Dashboard & Analytics (Admin)

paths:
  # ===== SYSTEM =====
  /api/health:
    get:
      summary: Health check
      description: Ki·ªÉm tra tr·∫°ng th√°i server
      tags: [System]
      responses:
        '200':
          description: Server ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-08T10:30:00Z"
                  version:
                    type: string
                    example: "2.0.0"

  # ===== AUTH =====
  /api/auth/register:
    post:
      summary: ƒêƒÉng k√Ω t√†i kho·∫£n
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "Password123!"
                name:
                  type: string
                  example: "Nguy·ªÖn VƒÉn A"
                phone:
                  type: string
                  example: "0901234567"
      responses:
        '201':
          description: ƒêƒÉng k√Ω th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Email ƒë√£ t·ªìn t·∫°i

  /api/auth/login:
    post:
      summary: ƒêƒÉng nh·∫≠p
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "Password123!"
      responses:
        '200':
          description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string

  /api/auth/me:
    get:
      summary: L·∫•y th√¥ng tin user hi·ªán t·∫°i
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Th√¥ng tin user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'

  # ===== PUBLIC - PRODUCTS =====
  /api/products:
    get:
      summary: Danh s√°ch s·∫£n ph·∫©m (Public)
      description: L·∫•y danh s√°ch s·∫£n ph·∫©m cho website client
      tags: [Public - Products]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 12
        - name: category
          in: query
          schema:
            type: string
          description: L·ªçc theo danh m·ª•c
        - name: brand
          in: query
          schema:
            type: string
          description: L·ªçc theo th∆∞∆°ng hi·ªáu
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: search
          in: query
          schema:
            type: string
          description: T√¨m ki·∫øm theo t√™n
        - name: sort
          in: query
          schema:
            type: string
            enum: [newest, price-asc, price-desc, popular]
            default: newest
      responses:
        '200':
          description: Danh s√°ch s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/products/{id}:
    get:
      summary: Chi ti·∫øt s·∫£n ph·∫©m
      tags: [Public - Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ProductDetail'
        '404':
          description: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m

  /api/products/featured:
    get:
      summary: S·∫£n ph·∫©m n·ªïi b·∫≠t
      tags: [Public - Products]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 8
      responses:
        '200':
          description: Danh s√°ch s·∫£n ph·∫©m n·ªïi b·∫≠t
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

  /api/products/bestsellers:
    get:
      summary: S·∫£n ph·∫©m b√°n ch·∫°y
      tags: [Public - Products]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 8
      responses:
        '200':
          description: Danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y

  # ===== PUBLIC - CATEGORIES =====
  /api/categories:
    get:
      summary: Danh s√°ch danh m·ª•c
      tags: [Public - Categories]
      responses:
        '200':
          description: Danh s√°ch danh m·ª•c
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /api/categories/{slug}:
    get:
      summary: Chi ti·∫øt danh m·ª•c
      tags: [Public - Categories]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          example: router
      responses:
        '200':
          description: Chi ti·∫øt danh m·ª•c
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CategoryDetail'

  # ===== USER - ORDERS =====
  /api/orders:
    post:
      summary: T·∫°o ƒë∆°n h√†ng m·ªõi
      tags: [User - Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items, shippingAddress, paymentMethod]
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                shippingAddress:
                  $ref: '#/components/schemas/Address'
                paymentMethod:
                  type: string
                  enum: [COD, VNPay, MoMo, ZaloPay]
                note:
                  type: string
      responses:
        '201':
          description: T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderDetail'

    get:
      summary: L·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa user
      tags: [User - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Danh s√°ch ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /api/orders/{id}:
    get:
      summary: Chi ti·∫øt ƒë∆°n h√†ng
      tags: [User - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderDetail'

  /api/orders/{id}/cancel:
    post:
      summary: H·ªßy ƒë∆°n h√†ng
      tags: [User - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: H·ªßy ƒë∆°n th√†nh c√¥ng

  # ===== ADMIN - PRODUCTS =====
  /api/admin/products:
    get:
      summary: Danh s√°ch s·∫£n ph·∫©m (Admin)
      description: L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi ph√¢n trang
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
          description: T√¨m ki·∫øm theo t√™n
        - name: category
          in: query
          schema:
            type: string
          description: L·ªçc theo danh m·ª•c
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, draft]
      responses:
        '200':
          description: Danh s√°ch s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AdminProduct'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: T·∫°o s·∫£n ph·∫©m m·ªõi
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AdminProduct'

  /api/admin/products/{id}:
    get:
      summary: Chi ti·∫øt s·∫£n ph·∫©m (Admin)
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt s·∫£n ph·∫©m
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AdminProduct'

    put:
      summary: C·∫≠p nh·∫≠t s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng

    delete:
      summary: X√≥a s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: X√≥a th√†nh c√¥ng

  /api/admin/products/{id}/toggle-status:
    patch:
      summary: B·∫≠t/t·∫Øt s·∫£n ph·∫©m
      tags: [Admin - Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng

  # ===== ADMIN - ORDERS =====
  /api/admin/orders:
    get:
      summary: Danh s√°ch ƒë∆°n h√†ng (Admin)
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipping, completed, cancelled]
        - name: paymentMethod
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
          description: T√¨m theo m√£ ƒë∆°n ho·∫∑c t√™n kh√°ch
      responses:
        '200':
          description: Danh s√°ch ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/admin/orders/{id}:
    get:
      summary: Chi ti·∫øt ƒë∆°n h√†ng (Admin)
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt ƒë∆°n h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderDetail'

  /api/admin/orders/{id}/status:
    put:
      summary: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      tags: [Admin - Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipping, completed, cancelled]
                note:
                  type: string
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng

  # ===== ADMIN - CUSTOMERS =====
  /api/admin/customers:
    get:
      summary: Danh s√°ch kh√°ch h√†ng
      tags: [Admin - Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Danh s√°ch kh√°ch h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/admin/customers/{id}:
    get:
      summary: Chi ti·∫øt kh√°ch h√†ng
      tags: [Admin - Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chi ti·∫øt kh√°ch h√†ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CustomerDetail'

  # ===== ADMIN - CATEGORIES =====
  /api/admin/categories:
    get:
      summary: Danh s√°ch danh m·ª•c (Admin)
      tags: [Admin - Categories]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Danh s√°ch danh m·ª•c
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryDetail'

    post:
      summary: T·∫°o danh m·ª•c m·ªõi
      tags: [Admin - Categories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng

  /api/admin/categories/{id}:
    put:
      summary: C·∫≠p nh·∫≠t danh m·ª•c
      tags: [Admin - Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng

    delete:
      summary: X√≥a danh m·ª•c
      tags: [Admin - Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: X√≥a th√†nh c√¥ng

  # ===== ADMIN - DASHBOARD =====
  /api/admin/dashboard/metrics:
    get:
      summary: Dashboard metrics
      description: L·∫•y c√°c metrics t·ªïng quan cho dashboard
      tags: [Admin - Dashboard]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      totalRevenue:
                        type: number
                        example: 125000000
                        description: T·ªïng doanh thu (VNƒê)
                      totalOrders:
                        type: integer
                        example: 245
                        description: T·ªïng s·ªë ƒë∆°n h√†ng
                      totalProducts:
                        type: integer
                        example: 156
                        description: T·ªïng s·ªë s·∫£n ph·∫©m
                      totalCustomers:
                        type: integer
                        example: 892
                        description: T·ªïng s·ªë kh√°ch h√†ng
                      revenueGrowth:
                        type: number
                        example: 12.5
                        description: % tƒÉng tr∆∞·ªüng doanh thu
                      ordersGrowth:
                        type: number
                        example: 8.3
                        description: % tƒÉng tr∆∞·ªüng ƒë∆°n h√†ng

  /api/admin/dashboard/revenue-chart:
    get:
      summary: Bi·ªÉu ƒë·ªì doanh thu
      tags: [Admin - Dashboard]
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [week, month, year]
            default: month
      responses:
        '200':
          description: Data cho bi·ªÉu ƒë·ªì doanh thu

  /api/admin/dashboard/top-products:
    get:
      summary: Top s·∫£n ph·∫©m b√°n ch·∫°y
      tags: [Admin - Dashboard]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: Danh s√°ch top s·∫£n ph·∫©m

  /api/admin/dashboard/recent-orders:
    get:
      summary: ƒê∆°n h√†ng g·∫ßn ƒë√¢y
      tags: [Admin - Dashboard]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Danh s√°ch ƒë∆°n h√†ng g·∫ßn ƒë√¢y

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token
        
        **C√°ch l·∫•y token:**
        1. ƒêƒÉng nh·∫≠p qua `/api/auth/login`
        2. Copy token t·ª´ response
        3. Th√™m v√†o header: `Authorization: Bearer <token>`

  schemas:
    # ===== USER =====
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "Nguy·ªÖn VƒÉn A"
        phone:
          type: string
          example: "0901234567"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        createdAt:
          type: string
          format: date-time

    # ===== PRODUCT =====
    Product:
      type: object
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "TP-Link Archer C6 - Router WiFi AC1200"
        price:
          type: number
          example: 850000
        discountedPrice:
          type: number
          example: 650000
        reviews:
          type: integer
          example: 128
        imgs:
          type: object
          properties:
            thumbnails:
              type: array
              items:
                type: string
            previews:
              type: array
              items:
                type: string
        category:
          type: string
          example: "Router"
        brand:
          type: string
          example: "TP-Link"
        stock:
          type: integer
          example: 85

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            description:
              type: string
            shortDescription:
              type: string
            specifications:
              type: object
              example:
                cpu: "Dual-core 800MHz"
                ram: "128MB"
                ports: "4 x LAN 10/100Mbps, 1 x WAN"
            relatedProducts:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    AdminProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            sku:
              type: string
              example: "TP-C6-001"
            sold:
              type: integer
              example: 189
            status:
              type: string
              enum: [active, inactive, draft]
              example: "active"
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    ProductInput:
      type: object
      required: [name, category, brand, price, stock]
      properties:
        name:
          type: string
          example: "TP-Link Archer C6"
        sku:
          type: string
          example: "TP-C6-001"
        category:
          type: string
          example: "Router"
        brand:
          type: string
          example: "TP-Link"
        price:
          type: number
          example: 850000
        salePrice:
          type: number
          example: 650000
        stock:
          type: integer
          example: 100
        description:
          type: string
        shortDescription:
          type: string
        specifications:
          type: object
        images:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string

    # ===== ORDER =====
    Order:
      type: object
      properties:
        id:
          type: string
          example: "ORD-20250108-001"
        customerName:
          type: string
          example: "Nguy·ªÖn VƒÉn A"
        customerEmail:
          type: string
          example: "user@example.com"
        items:
          type: integer
          example: 3
        total:
          type: number
          example: 2150000
        status:
          type: string
          enum: [pending, processing, shipping, completed, cancelled]
          example: "processing"
        paymentMethod:
          type: string
          enum: [COD, VNPay, MoMo, ZaloPay]
          example: "VNPay"
        date:
          type: string
          format: date-time

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            customerInfo:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            items:
              type: array
              items:
                type: object
                properties:
                  productId:
                    type: string
                  productName:
                    type: string
                  quantity:
                    type: integer
                  price:
                    type: number
                  total:
                    type: number
            shippingAddress:
              $ref: '#/components/schemas/Address'
            subtotal:
              type: number
            shippingFee:
              type: number
            discount:
              type: number
            total:
              type: number
            timeline:
              type: array
              items:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  note:
                    type: string

    # ===== CUSTOMER =====
    Customer:
      type: object
      properties:
        id:
          type: string
          example: "cust_123"
        name:
          type: string
          example: "Nguy·ªÖn VƒÉn A"
        email:
          type: string
          example: "customer@example.com"
        phone:
          type: string
          example: "0901234567"
        totalOrders:
          type: integer
          example: 12
        totalSpent:
          type: number
          example: 15000000
        lastOrder:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive]

    CustomerDetail:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/Address'

    # ===== CATEGORY =====
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: "Router"
        slug:
          type: string
          example: "router"
        icon:
          type: string
        productCount:
          type: integer

    CategoryDetail:
      allOf:
        - $ref: '#/components/schemas/Category'
        - type: object
          properties:
            description:
              type: string
            image:
              type: string
            status:
              type: string
              enum: [active, inactive]

    CategoryInput:
      type: object
      required: [name]
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        icon:
          type: string
        image:
          type: string

    # ===== OTHER =====
    Address:
      type: object
      properties:
        fullName:
          type: string
        phone:
          type: string
        street:
          type: string
        ward:
          type: string
        district:
          type: string
        city:
          type: string
        zipCode:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 156
        totalPages:
          type: integer
          example: 16
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: string
